---
version: 2.1

orbs:
    browser-tools: circleci/browser-tools@0.1.3
    win: circleci/windows@2.4.0
    node: circleci/node@3.0.1
    slack: circleci/slack@3.4.2
    npm-release-management: salesforce/npm-release-management@3.4.1

parameters:
    fingerprint:
        type: string
        default: 'c7:78:f5:7c:26:35:0a:57:9a:cb:23:f8:92:4b:40:b7'
    cache-version:
        type: string
        default: 'v1'
    sfdx-cli-version:
        type: string
        default: 'latest'
    node-image-version:
        type: string
        default: 'node:12'
    node-build-image-version:
        type: string
        default: '10.15.3'
    publish:
        type: boolean
        default: false
    publish-type:
        type: string
        default: minor
    with-cache:
        type: boolean
        default: false

commands:
    gh-config:
        parameters:
            cache_timeout:
                description: 'Cache timeout in seconds'
                type: integer
                default: 120
            gh_email:
                description: 'GitHub email'
                type: string
                default: $GH_EMAIL
            gh_username:
                description: 'GitHub username'
                type: string
                default: 'Release Bot'
        steps:
            - run:
                  name: 'Configuring GitHub'
                  command: |
                      git config credential.helper 'cache --timeout=<< parameters.cache_timeout >>'
                      git config user.email "<< parameters.gh_email >>"
                      git config user.name "<< parameters.gh_username >>"

    init-setup:
        steps:
            - checkout
            - run: yarn --version
            - run: node --version
            - node/install-packages:
                  pkg-manager: yarn
                  app-dir: ~/cli
                  with-cache: << pipeline.parameters.with-cache >>
            - run: yarn build

    publish:
        steps:
            - run:
                  name: Bump package version
                  command: |
                      yarn version --<< pipeline.parameters.publish-type >> --no-git-tag-version
                      git add package.json
                      export RELEASE_TAG="$(node -pe "require('./package.json').version")"
                      echo "export RELEASE_VERSION=$RELEASE_TAG" >> $BASH_ENV
                      source $BASH_ENV
                      git commit -m "chore: updated version $RELEASE_TAG"
            - npm-release-management/setup-aws
            - npm-release-management/install-sfdx-trust
            - npm-release-management/sign
            - npm-release-management/publish:
                  use_tarfile: true
            - run: git push origin main
            - run:
                  name: Tag the release and push to repo
                  command: |
                      git tag v${RELEASE_VERSION}
                      git push --tags

    ssh-config:
        steps:
            - add_ssh_keys:
                  fingerprints:
                      - << pipeline.parameters.fingerprint >>

    stage-and-store-artifact:
        parameters:
            artifact-dir:
                type: string
                default: 'artifact'
        steps:
            - run:
                  name: Staging artifact
                  command: |
                      mkdir << parameters.artifact-dir >>
                      find . -name "*.tgz" -type f -exec cp {} ./<< parameters.artifact-dir >> \;
            - store_artifacts:
                  path: ./<< parameters.artifact-dir >>

    store-results:
        steps:
            - store_test_results:
                  path: reports
            - store_artifacts:
                  path: reports
            - store_artifacts:
                  path: errorShots

executors:
    default-executor:
        parameters:
            image:
                type: string
                default: << pipeline.parameters.node-image-version >>
            working-dir:
                type: string
                default: ~/cli
        docker:
            - image: << parameters.image >>
        working_directory: << parameters.working-dir >>

jobs:
    build:
        executor:
            name: default-executor
            image: circleci/node:<< pipeline.parameters.node-build-image-version >>-browsers
        steps:
            - init-setup
            - browser-tools/install-chrome:
                  replace-existing: true
            - run: yarn lint:ci
            - run: yarn test:ci
            - run: yarn test:e2e-ci
            - store-results
            - persist_to_workspace:
                  root: .
                  paths:
                      - .git
                      - package.json
                      - oclif.manifest.json
                      - yarn.lock
                      - README.md
                      - bin
                      - dist
                      - modules
                      - lib

    build-and-test-win:
        executor: win/default
        environment:
            # alias variable created by auth and referenced by test framework
            - SFDC_ALIAS: local-dev-user
        steps:
            - checkout
            - restore_cache:
                  key: dependency-cache-win-{{ checksum "yarn.lock" }}
            - run:
                  shell: bash.exe
                  command: |
                      node --version
                      npm install -g sfdx-cli@<< pipeline.parameters.sfdx-cli-version >>
                      sfdx --version
            - run:
                  name: 'Authenticate to local dev testing org'
                  shell: bash.exe
                  command: |
                      echo $SFDC_JWT_KEY | base64 --decode > localdev.key
                      sfdx force:auth:jwt:grant --clientid ${SFDC_CLIENTID} --username ${SFDC_USERNAME} --setalias ${SFDC_ALIAS} --jwtkeyfile $PWD/localdev.key --setdefaultusername --setdefaultdevhubusername
                      sfdx force:auth:list
            - run:
                  shell: bash.exe
                  command: |
                      choco install googlechrome --ignore-checksums
            - run: yarn install --frozen-lockfile
            - run: yarn build
            - run: yarn test:ci
            # - run:
            #       shell: bash.exe
            #       command: |
            #           yarn test:e2e-ci
            - store-results
            - save_cache:
                  key: dependency-cache-win-{{ checksum "yarn.lock" }}
                  paths:
                      - node_modules
                      - ~/.cache/yarn

    build-artifact:
        description: 'Building and archiving tarball'
        executor: default-executor
        steps:
            - init-setup
            - run: npm pack # using npm vs yarn since yarn does not support npmignore mixed with package.json config
            - stage-and-store-artifact

    publish:
        executor: default-executor
        steps:
            - slack/notify:
                  channel: 'pdt_releases'
                  color: '#FFDEAD'
                  message: 'Starting publish for Local Dev Server'
            - ssh-config
            - init-setup
            - gh-config
            - publish
            - slack/notify:
                  channel: 'pdt_releases'
                  color: '#9bcd9b'
                  message: 'Local Dev Server v${RELEASE_VERSION} has been published to npm'
            - slack/status:
                  channel: 'pdt_releases'
                  fail_only: true

workflows:
    version: 2.1

    commit-workflow:
        unless: << pipeline.parameters.publish >>
        jobs:
            - build
            - build-artifact
            - build-and-test-win:
                  name: WinTestsGS0
                  context: local-dev-gs0
            - build-and-test-win:
                  name: WinTestsR2
                  context: local-dev-r2

    publish-workflow:
        when: << pipeline.parameters.publish >>
        jobs:
            - slack/approval-notification:
                  message: Pending Approval for Publish of Local Dev Server
                  channel: 'pdt_releases'
                  color: '#0E1111'
            - build
            - build-artifact
            - build-and-test-win:
                  name: WinTestsGS0
                  context: local-dev-gs0
            - build-and-test-win:
                  name: WinTestsR2
                  context: local-dev-r2
            - hold: # Requires manual approval in Circle Ci
                  type: approval
            - publish:
                  context: pdt-publish-restricted-context
                  filters:
                      branches:
                          only:
                              - main
                  requires:
                      - build
                      - build-artifact
                      - WinTestsGS0
                      - WinTestsR2
                      - hold
